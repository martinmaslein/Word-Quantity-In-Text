/**
 * Muestra la tabla hash del mapeo con sus respectivas entradas [c:c1,v:v1], cuando temrina la lista muestra | -eolist
 * @param m El mapeo a mostrar
 */
void mostrarMapeo(tMapeo m) {

    for (int bucket = 0; bucket < m->longitud_tabla; bucket++) {
        tLista lista = *(m->tabla_hash + bucket);
        tPosicion pos = l_primera(lista);
        while (pos != l_fin(lista)) {
            tEntrada e = (tEntrada) l_recuperar(lista, pos);
            char * c = (e)->clave;
            int * v = (int *) (e)->valor;
            printf("[c:%s v:%i] | ", c, *v);

            pos = l_siguiente(lista, pos);
        }
        printf("-eolist \n");
    }
}

void map_test() {
    tMapeo map;
    crear_mapeo(&map, 10, fHash, fComparador);
    printf("cant elementos: %i \n", map->cantidad_elementos);

    char * c1 = "a";
    int v1 = 1;

    char * c2 = "b";
    int v2 = 2;

    char * c3 = "c";
    int v3 = 3;

    char * c4 = "d";
    int v4 = 4;

    char * c5 = "e";
    int v5 = 5;

    char * c6 = "f";
    int v6 = 6;

    char * c7 = "g";
    int v7 = 7;

    char * c9 = "h";
    int v9 = 8;

    char * c8 = "a"; //repetido
    int v8 = 10;

    m_insertar(map, c1, &v1);
    m_insertar(map, c2, &v2);
    m_insertar(map, c3, &v3);
    m_insertar(map, c4, &v4);
    m_insertar(map, c5, &v5);
    m_insertar(map, c6, &v6);
    m_insertar(map, c7, &v7);
    m_insertar(map, c8, &v8);
    m_insertar(map, c9, &v9);

    printf("inserto 8 elementos -> cant elementos: %i \n", map->cantidad_elementos);
    printf("longitud tabla: %i \n", map->longitud_tabla);
    printf("\n");
    mostrarBuckets(map);
    printf("\n");



    printf("m_eliminar() \n");
    m_eliminar(map, c4, &fEliminarC, &fEliminarV); // [d , 4]
    m_eliminar(map, c8, &fEliminarC, &fEliminarV); // [a , 10]
    printf("elimino 2 elementos -> cant elementos: %i \n", map->cantidad_elementos);
    printf("\n");

    printf("m_destruir() \n");
    m_destruir(&map, &fEliminarC, &fEliminarV);
    printf("\n");

    if (map != NULL) {
        mostrarBuckets(map);
        printf("cant elementos: %i \n", map->cantidad_elementos);
    } else {
        printf("cant elementos: 0 \n");
    }


}

void list_test() {
    tLista lista;
    crear_lista(&lista);

    int *a = malloc(sizeof(int));
    int *b = malloc(sizeof(int));
    int *c = malloc(sizeof(int));
    int *d = malloc(sizeof(int));

    *a = 1;
    *b = 2;
    *c = 3;
    *d = 4;

    l_insertar(lista, l_fin(lista), a);
    l_insertar(lista, l_fin(lista), b);
    l_insertar(lista, l_fin(lista), c);
    l_insertar(lista, l_fin(lista), d);

    printf("\n");
    printf("----------------------- \n");
    tPosicion pos = l_primera(lista);
    while (pos != l_fin(lista)) {
        int * x = l_recuperar(lista, pos);
        printf("%i ", *x);
        pos = l_siguiente(lista, pos);
    }
    printf("-eolist\n");
    printf("------------------------ \n");
    printf("\n");

    printf("l_destruir() \n");
    l_destruir(&lista, fEliminarEntero);

    printf("\n");
    printf("\n ----------------------- \n");
    if (lista != NULL) {
        pos = l_primera(lista);
        while (pos != l_fin(lista)) {
            int * x = l_recuperar(lista, pos);
            printf("%i ", *x);
            pos = l_siguiente(lista, pos);
        }
    }
    printf("-eolist\n");
    printf("----------------------- \n");
    printf("\n");
}